Shader "Grimm/CameraShader" 
{
    Properties
    {
        _MainTex("Base (RGB)", 2D) = "white" {}
        _ShiftPercentage("Shift Percentage",Range(0,1)) = 0
        _HueShift("Shift Hue", Range(0,1)) = 0
        //_SatShift("Saturation Shift", Range(0,1)) = 0
        //_ValShift("Value Shift", Range(0,1)) = 0
        //_ColorRangeOffset("Color Range Offset", Range(-3,3)) = 0
    }
    SubShader
    {
        Pass 
        {
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag

            #include "UnityCG.cginc"

            uniform sampler2D _MainTex;
            uniform float _bwBlend;
            uniform float _ShiftPercentage;
            uniform float _HueShift;

            const float Epsilon = 1e-10;


            float3 HUEtoRGB(in float H)
            {
                float R = abs(H * 6 - 3) - 1;
                float G = 2 - abs(H * 6 - 2);
                float B = 2 - abs(H * 6 - 4);
                return saturate(float3(R, G, B));
            }

            float3 HSVtoRGB(in float H, in float S, in float V)
            {
                float3 RGB = HUEtoRGB(H);
                return ((RGB - 1) * S + 1) * V;
            }

            float3 RGBtoHCV(in float3 RGB)
            {
                // Based on work by Sam Hocevar and Emil Persson
                float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
                float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
                float C = Q.x - min(Q.w, Q.y);
                float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
                return float3(H, C, Q.x);
            }

            float3 RGBtoHSV(in float3 RGB)
            {
                float3 HCV = RGBtoHCV(RGB);
                float S = HCV.y / (HCV.z + Epsilon);
                return float3(HCV.x, S, HCV.z);
            }

            float RedCheck(float adjustedHue)
            {
                return saturate(-abs(2.6 * ((2 * adjustedHue) - 1)) + 1);
            }

            float RedTest(in float3 RGB)
            {
                //return (RGB.r + (1.0 - RGB.g) + (1.0 - RGB.b)) / 2;
                //return RGB.r;

                float maximum = max(max(RGB.r,RGB.g),RGB.b);
                float minimum = min(min(RGB.r, RGB.g), RGB.b);
                if (maximum - minimum == 0)
                {
                    return 0;
                }
                else
                {
                    return 1.0 - (abs((RGB.g - RGB.b) / (maximum - minimum)) / 60);
                }
            }

            float4 frag(v2f_img i) : COLOR 
            {
                float4 c = tex2D(_MainTex, i.uv);

                float redness = RedTest(c.rgb);

                float red = c.r;
                float blue = c.b;

                c.r = lerp(red, blue, redness * _ShiftPercentage);
                c.b = lerp(blue, red,redness * _ShiftPercentage);

                return c;

                /*float4 c = tex2D(_MainTex, i.uv);

                

                float3 redHue = RGBtoHSV(c.rgb);

                float redHueCheck = fmod(redHue.x + 0.5, 1.0);

                float redShiftPercentage = RedCheck(redHueCheck);

                float blueHue = fmod(redHueCheck + _HueShift, 1.0);

                c.rgb = lerp(c.rgb, HSVtoRGB(blueHue, redHue.y, redHue.z), _ShiftPercentage * redShiftPercentage);
                return c;*/
            }
            ENDCG
        }
    }
}
